---
import Default from '@astrojs/starlight/components/SocialIcons.astro'
import type { Props } from '@astrojs/starlight/props'

// TODO(HiDeoo) only certain page?
// TODO(HiDeoo) mobile/responsive
---

<starlight-override-map></starlight-override-map>
<Default {...Astro.props}><slot /></Default>

<script>
  const overrides: Override[] = [
    // Header
    { name: 'Header', selector: 'div.header', offset: { block: 8, inline: 20 } },
    { name: 'SiteTitle', selector: '.site-title', offset: { inline: 8 } },
    // TODO(HiDeoo) search modal?
    { name: 'Search', selector: 'site-search button', offset: 6 },
    // TODO(HiDeoo)
    // { name: 'SocialIcons', selector: 'div.header' },
    { name: 'ThemeSelect', selector: 'starlight-theme-select label', offset: { inline: 8 } },
    { name: 'LanguageSelect', selector: 'starlight-lang-select label' },
  ]

  customElements.define(
    'starlight-override-map',
    class StarlightOverrideMap extends HTMLElement {
      static #didRegisterListeners = false
      #highlight: HTMLDivElement | undefined
      #tooltip: HTMLDivElement | undefined

      constructor() {
        super()

        if (!StarlightOverrideMap.#didRegisterListeners) {
          this.#createOverlay()
          this.#registerListeners()
        }
      }

      #registerListeners() {
        StarlightOverrideMap.#didRegisterListeners = true

        const inEvents = ['focus', 'mouseover'] as const
        const outEvents = ['blur', 'mouseout'] as const

        for (const override of overrides) {
          const elements = document.querySelectorAll(override.selector)
          // TODO(HiDeoo) validate only 1 element (not always the case)

          for (const element of elements) {
            for (const event of inEvents) {
              element.addEventListener(event, () => this.#showOverlay(override, element), { capture: true })
            }

            for (const event of outEvents) {
              element.addEventListener(event, () => this.#hideOverlay())
            }
          }
        }
      }

      #createOverlay() {
        this.#highlight = document.createElement('div')
        // TODO(HiDeoo)
        // overlay.style.backgroundColor = `color-mix(in hsl, var(--sl-color-accent) 50%, transparent)`
        this.#highlight.style.border = `2px dashed color-mix(in hsl, var(--sl-color-accent) 100%, transparent)`
        this.#highlight.style.borderRadius = '0.25rem'
        this.#highlight.style.display = 'none'
        this.#highlight.style.pointerEvents = 'none'
        this.#highlight.style.position = 'absolute'
        this.#highlight.style.zIndex = '100'

        this.#tooltip = document.createElement('div')
        this.#tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.5)'
        this.#tooltip.style.borderRadius = '0.5rem'
        this.#tooltip.style.color = 'white'
        this.#tooltip.style.display = 'none'
        this.#tooltip.style.padding = '0.5rem'
        this.#tooltip.style.position = 'absolute'
        this.#tooltip.style.zIndex = '101'

        document.body.append(this.#highlight)
        document.body.append(this.#tooltip)
      }

      #showOverlay(override: Override, element: Element) {
        if (!this.#highlight || !this.#tooltip) return

        // TODO(HiDeoo) padding/margin?
        const rect = element.getBoundingClientRect()

        const blockOffset = typeof override.offset === 'number' ? override.offset : (override.offset?.block ?? 0)
        const inlineOffset = typeof override.offset === 'number' ? override.offset : (override.offset?.inline ?? 0)

        this.#highlight.style.top = `${rect.top - blockOffset}px`
        this.#highlight.style.left = `${rect.left - inlineOffset}px`
        this.#highlight.style.width = `${rect.width + inlineOffset * 2}px`
        this.#highlight.style.height = `${rect.height + blockOffset * 2}px`
        this.#highlight.style.display = 'block'

        // TODO(HiDeoo) move to showTooltip
        // TODO(HiDeoo) handle offseets
        // TODO(HiDeoo) position to handle viewport/current position
        this.#tooltip.style.top = `${rect.top + rect.height}px`
        this.#tooltip.style.left = `${rect.left}px`
        this.#tooltip.style.display = 'block'
        this.#tooltip.textContent = override.name
      }

      #hideOverlay() {
        if (!this.#tooltip || !this.#highlight) return

        this.#highlight.style.display = 'none'
        this.#tooltip.style.display = 'none'
      }
    },
  )

  interface Override {
    name: string
    // In pixels
    offset?: number | { block?: number; inline?: number }
    selector: string
  }
</script>
